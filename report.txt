REPORT -- Assignment 3 & 4
---------------------------

Group members: Shirley (Zhaorong) Xia & Vrishti Dutta
_______________________________________________________________________________
Process you used to complete the assignment (including organization,
understanding the starter code, and building a solution):

We started this coding assignment with some basic knowledge of ray tracing from
attending lectures.
The actual implementaion was difficult but helped consolidate our understanding 
of lecture materials.

We resolved most bugs and difficulties through online research, office hours, 
and by discussing high-level concepts with our fellow classmates.
We also drew diagrams to visualize our implementations to make it easier to 
break down, implement and debug.

To start off the assignment, we isolated what we thought was the easiest object
to render, the plane, and applied the series of transformations (camera->world, 
model->world ...etc) to render it on screen.
However, this proved to be extremely challenging. Even though our theoretical 
understanding and mathematical calculations were correct, we couldn't get it to 
render as shown on the handout. In the end we discovered the reason was that 
we misunderstood the alignment of the canonical plane (which lay along the 
x and y axis, we thought it was x and z) led us to apply the wrong transformations.

After resolving this difficult problem, we moved through the rest of the
assignment with relative ease.

_______________________________________________________________________________
Brief description code implemented (including "cruncy" part of the code):

Functions implmented
-------------------------------------------------------------------------------
Main:	Creates and stores image generated by the RayTracer program

	A3: we create a ray for each pixel on the camera with origin at camera
	and call rayTrace (recursive), from which we receive a RGB color value 
	and store it in the image struct.
	
	A4: Grid anti-aliasing is done by creating nxn # of rays for each grid
	in the pixel. We set this grid to be 4x4. We call rayTrace on each of
	these rays and average the colors accumulated by the number of rays.
 
 
rayTrace: Given a ray returns a color value at the intersection made by ray

	Calls findFirstHit with given ray to check if intersections exists for
	this ray. If so create another ray from light source to point of 
	intersection and call findFirstHit again with this new ray. If ray from
	intersection point and light source does not intersect with any other
	object, call rtShade and add the return value to the color struct for 
	point. Create a reflection ray and recursively call rayTrace. 
	Return the recursively accumulated color value.
	
	
findFirstHit: Returns lambda value, intersection point and normal at intersect
	
	Iterates through all objects in the object list and call the object's 
	intersection function given the ray.
	Returns lambda, intersection point and normal values of nearest object.

planeIntersect: return lambda, intersection point and normal if intersection exists

	Transform ray from world space to model space, check if it intersects with 
	model plane. If so calculate lambda, intersection point and normal. Transform
	intersection point and normal to to world space using the M2W transform matrix.
	
sphereIntersect: same as planeIntersect
	Transform ray to model space and check for intersection with model sphere.
	Calculate lambda and use it to calculate intersection point and normal 
	(normal is just the intersection point for unit sphere).
	Transform intersection point and normal from model to world space.

normalTransform:
	return the inverse transpose of given vector.

rtShade: Takes intersection point, normal and returns color(intensity) value
	calculates ambient, diffuse and specular components. Return the sum of 3
	components in color struct.
	
setupscene:
	Set up small yellow plane on 'ceiling' to represent area light.
	Set up 4x4 area light in for loop 
	

texture mapping:
  	using the a, b relative coordinates for the image that has to be mapped to,
  	texmap in utils returns the RGB values of the scenery 
_______________________________________________________________________________
Easy and hard parts of the assigment:

It was difficult figuring out how to even start. Due to our limited understanding
of ray tracers and the complexity of this assignment (project really), debugging 
our initial implementation was akin to shooting at objects in the dark--pun intended.
Even after getting past the seemingly endless compile errors and segmentation faults, 
we still couldn't even render what we thought was a basic object--the plane.
We were applying our theoretical knowledge to code that we had trouble understanding.
After realizing how the model objects are set up and finally getting the plane to
render correctly, it was smooth sailing.



Triumphs: -Getting the reflection component to compile and render correctly immediately
after coding it up. At this point I was already familiar with how the code and how the
phong illumination components works.
	  -Getting the rayTrace recursion working. Reflections are cool.

_______________________________________________________________________________
Our understanding of concepts:
	- Geometry (points, vectors, planes, spheres, intersections, normals, etc.):
		-this project really hammered home our understanding of homogeneous 
		coordinate system. Especially when leaving pw=1 for a vector screws up
		an entire transformation.
		-ray-plane intersection can be simplified to lambda = -(ray->p0.pz)/ray->d.pz
		the normal is simply the up vector.
		-ray-sphere intersection: there can be 1,2 or 0 points of intersections
		finding the normal vector is a simple as subtracting c from p.
		-intersection is found by applying a scalar amount of the ray direction vector
		to the ray origin.
		
				
	- Object transformations:
		-objects, cameras and views can be moved around into different coordinate
		systems through applying transformation matrices.

	- Projection and coordinate frames:
		
		

	- Illumination (the Phong model, basically):
		-ambient: a small, constant color value for the object
		-diffuse: light scattered evenly in all directions 
		(apply a small constant to the dot product of normal and light to point vector)
		-specular: only visible when camera aligns with the angle of reflection
		
_______________________________________________________________________________
The role of each member on the project:

Shirley: 
-Fixed plane rendering. Discovered canonical plane is set up along x-y axis instead of x-z
-fixed bugs in rayTrace, findFirstHit, intersect functions
-wrote normalTransform, sphereIntersect
-wrote rtShade for phone illumination
-added recursive calls to rayTrace for reflections
-wrote the report


Vrishti:
-set up RayTracing calls and helper functions (i.e findFirstHit, transform functions)
-wrote planeIntersect, sphereintersect
-set up rtShade
-set up the report
-wrote main
-texture and environment mapping
-wrote cylinder intersect
