 
/////////////////////////////////////////////
// Ray and normal transforms
/////////////////////////////////////////////
inline void rayTransform(struct ray3D *ray_orig, struct ray3D *ray_transformed, struct object3D *obj)
{
 // Transforms a ray using the inverse transform for the specified object. This is so that we can
 // use the intersection test for the canonical object. Note that this has to be done carefully!

 ///////////////////////////////////////////
 // TO DO: Complete this function
 ///////////////////////////////////////////
 //copying original ray into transformed ray holder
 // printf("ray_orig: %f,%f,%f\n", ray_orig->d.px, ray_orig->d.py, ray_orig->d.pz);
  memcpy(ray_transformed, ray_orig, sizeof(struct ray3D));
  
 //transforming ray origin and direction vector from world to model view, using T_inv
  matVecMult(obj->Tinv, &(ray_transformed->p0));
  matVecMult(obj->Tinv, &(ray_transformed->d));
  ray_transformed->d.pw = 0;
 //normalizing ray direction and origin
  normalize(&(ray_transformed->d));
  ray_transformed->d.pw = 0;
}

inline void normalTransform(struct point3D *n_orig, struct point3D *n_transformed, struct object3D *obj)
{
 // Computes the normal at an affinely transformed point given the original normal and the
 // object's inverse transformation. From the notes:
 // n_transformed=A^-T*n normalized.

 ///////////////////////////////////////////
 // TO DO: Complete this function
 ///////////////////////////////////////////
 memcpy(n_transformed, n_orig, sizeof(struct point3D)); //copying original n into transformed n
 double T_transpose[4][4]; //empty matrix for storing transpose of model to world matrix

 // Note: "inverse transpose of model to world matrix", i.e. transpose(T^(-1)) == transpose(T)
 //       using linear algebra basics: transpose(A) = transpose(A^(-1))
 transpose(obj->T, T_transpose); //finding transpose of model to world matrix
 matVecMult(T_transpose, n_transformed); //transforming n from model to world
 n_transformed->pw=0;
 normalize(n_transformed); //normalizing transformation of n
}
