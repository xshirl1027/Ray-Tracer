void cylinderIntersect(struct object3D *cylinder, struct ray3D *ray, double *lambda, struct point3D *p, struct point3D *n, double *a, double *b){
 // Computes and returns the value of 'lambda' at the intersection
 // between the specified ray and the specified canonical cylinder.

 /////////////////////////////////
 // TO DO: Complete this function.
 /////////////////////////////////
//src = https://www.cl.cam.ac.uk/teaching/1999/AGraphHCI/SMAG/node2.html
	struct ray3D *model_ray = (struct ray3D *) malloc(sizeof(struct ray3D));
	memcpy(model_ray, ray, sizeof(ray3D));
	
	matVecMult(cylinder->Tinv, &(model_ray->p0));
	matVecMult(cylinder->Tinv, &(model_ray->d));
	
	double A = pow(model_ray->d.px,2)  + pow(model_ray->d->py,2);
	double B = (model_ray->d.px * model_ray->p0.px + model_ray->d.py * model_ray->p0.py);
	double C = pow(model_ray->p0.px, 2) + pow(model_ray->p0.py,2) - 1;


	double t_value;
	double soln = B*B - 4*A*C;
	/* intersection with infinite cylinder */
	if(soln < 0){
		return false; // No intersections
	} else if (soln == 0){
		t_value = -B/2*A;
	} else {
		double lambda1 = (-B + sqrt(soln))/A;
		double lambda2 = (-B - sqrt(soln))/A;
		if(lambda1 <= 0 && lambda2 < 0) {
			*lambda = 0;
		} else if(lambda1 > 0 && lambda2 < 0) {
			*lambda = lambda1;
		} else if(lambda1 > lambda2 && lambda2 > 0)
			*lambda = lambda2;
	}

	/* now we bound by a plane at the top of the cylinder and a plane at the bottom */
	struct point3D candidatePoint; 
	candidatePoint.px = model_ray->p0.px + lambda * model_ray->d.px;
	candidatePoint.py = model_ray->p0.py + lambda * model_ray->d.py;
	candidatePoint.pz = model_ray->p0.pz + lambda * model_ray->d.pz;
	candidatePoint.pw = 1;
	struct point3D candidateNormal;
	candidateNormal.px = candidatePointpx - 0;
	candidateNormal.py = candidatePointpy - 0;
	candidateNormal.pz = 0;//Point3D(0,0, candidatePoint[2]);
	candidateNormal.pw = 0;
	if(candidatePoint.pz> 0.5){

		/* check plane at 0,0,0.5 */
		if(dot(model_ray->d,newPoint(0,0,1)) == 0)
			*lambda = 0; // If the normal and vector are perpendicular
						//a
		struct point3D *a = newPoint(0,0,0.5);
		struct point3D *b = (struct point3D *) malloc(sizeof(struct point3D));
		memcpy(b, model_ray->p0);
		t_value = (Point3D(0, 0, 0.5) - rayInModel.origin).dot(Vector3D(0,0,1)) / (rayInModel.dir.dot(Vector3D(0,0,1)));
		candidatePoint = rayInModel.origin + t_value * rayInModel.dir;
		candidateNormal = Vector3D(0,0,1);

		if((sqr(candidatePoint[0]) + sqr(candidatePoint[1])) > 1)
			return false; // Make sure we're within the circle
		
			
	} else if(candidatePoint[2] < -0.5) {
		/* check plane at 0, 0, -1 */
		if(rayInModel.dir.dot(Vector3D(0,0,-1)) == 0)
			return false;

		t_value = (Point3D(0, 0, -0.5) - rayInModel.origin).dot(Vector3D(0,0,-1)) / (rayInModel.dir.dot(Vector3D(0,0,-1)));
		candidatePoint = rayInModel.origin + t_value * rayInModel.dir;
		candidateNormal = Vector3D(0,0,-1);

		if((sqr(candidatePoint[0]) + sqr(candidatePoint[1])) > 1)
			return false;
		
	}

	if (!ray.intersection.none && ray.intersection.t_value < t_value )
	    return false;
	

	ray.intersection.none = false;
	ray.intersection.t_value = t_value;
    ray.intersection.point = candidatePoint;
	ray.intersection.normal = candidateNormal;
	ray.intersection.normal = worldToModel.transpose() * ray.intersection.normal;
	ray.intersection.normal.normalize();
	ray.intersection.point = modelToWorld * ray.intersection.point;

	return true;
}